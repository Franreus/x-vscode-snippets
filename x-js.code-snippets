{
	// Xavier Visual Studio Code Snippets for Reus Web Hackers course
	"yargs command": {
		"prefix": "yargs1",
		"body": [
			"yargs.command({",
			"    command: '${1:cmd}',",
			"    describe: '${2:txt}',",
			"    builder: {",
			"        ${3:option}: {",
			"            describe: '${4:txt}',",
			"            demandOption: true,",
			"            type: 'string'",
			"        },",
			"        ${5:option}: {",
			"            describe: '${6:example}',",
			"            demandOption: true,",
			"            type: 'string'",
			"        }",
			"    },",
			"    handler(argv) {",
			"        addNote(argv.${3:option}, argv.${5:option})",
			"    }",
			"})"
		],
		"description": "yargs command"
	},
	"yargs parse": {
		"prefix": "yargs2",
		"body": [
			"yargs.parse()"
		],
		"description": "yargs parse"
	},
	"help de npm": {
		"prefix": "x-help-npm",
		"body": [
			"npm init // para generar el package.json",
			"npm install // para instalar los paquetes de package.json",
			"",
			"npm install [-g] <paquete> [ --save-dev | -D ]",
			"npm uninstall [-g] <paquete>",
			"",
			"npm list [-g] [--depth=0]",
			"",
			"npm run <nombre_del_script_en_package.json> ",
			"",
			"npm outdated [-g] ",
			"npm update [-g] <paquete>",
			"",
			"npm audit [fix]"
		],
		"description": "help de npm"
	},
	"mongoose model": {
		"prefix": "x-help-mongoose-model",
		"body": [
			"const mongoose = require('mongoose')",
			"const validator = require('validator')",
			"",
			"const User = mongoose.model('User', {",
			"    name: {",
			"        type: String,",
			"        required: true,",
			"        trim: true",
			"    },",
			"    email: {",
			"        type: String,",
			"        required: true,",
			"        trim: true,",
			"        lowercase: true,",
			"        validate(value) {",
			"            if (!validator.isEmail(value)) {",
			"                throw new Error('Email is invalid')",
			"            }",
			"        }",
			"    },",
			"    password: {",
			"        type: String,",
			"        required: true,",
			"        minlength: 7,",
			"        trim: true,",
			"        validate(value) {",
			"            if (value.toLowerCase().includes('password')) {",
			"                throw new Error('Password cannot contain \"password\"')",
			"            }",
			"        }",
			"    },",
			"    age: {",
			"        type: Number,",
			"        default: 0,",
			"        validate(value) {",
			"            if (value < 0) {",
			"                throw new Error('Age must be a postive number')",
			"            }",
			"        }",
			"    }",
			"})",
			"",
			"module.exports = User"
		],
		"description": "mongoose model"
	},
	"heroku help": {
		"prefix": "x-help-heroku",
		"body": [
		  "heroku -v",
		  "",
		  "heroku login // to start the following",
		  "",
		  "heroku keys:add // to upload id_rsa.pub",
		  "",
		  "heroku create your-awesome-app // to create a heroku app: http and git URLâ€™s created and directly adding git URL into our remotes",
		  "",
		  "heroku git:remote -a your-awesome-app",
		  "",
		  "At package.json:",
		  "	 \"scripts\": {\"start\": \"node src/app.js\"} // since heroku executes: \"npm run start\"",
		  "",
		  "At app.js: ",
		  "	const port = process.env.PORT || 3000   // first set by heroku dynamically, second for our local set up",
		  "",
		  "Delete up to localhost:3000 on URL fetches // using relative paths",
		  "",
		  "Do git add & commit",
		  "",
		  "git push heroku master"
		],
		"description": "heroku help"
	  },
	  "routers/resouce.js": {
		"prefix": "x-routers-resource.js",
		"body": [
		  "const express = require('express')",
		  "const router = new express.Router()",
		  "const ${1:Resource} = require('../models/${2:resource}')",
		  "",
		  "router.post('/${2:resource}s', async (req, res) => {",
		  "    const ${2:resource} = new ${1:Resource}(req.body)",
		  "",
		  "    try {",
		  "        await ${2:resource}.save()",
		  "        res.status(201).send(${2:resource})",
		  "    } catch (e) {",
		  "        res.status(400).send(e)",
		  "    }",
		  "})",
		  "",
		  "router.get('/${2:resource}s', async (req, res) => {",
		  "    try {",
		  "        const ${2:resource}s = await ${1:Resource}.find({})",
		  "        res.send(${2:resource}s)",
		  "    } catch (e) {",
		  "        res.status(500).send()",
		  "    }",
		  "})",
		  "",
		  "router.get('/${2:resource}s/:id', async (req, res) => {",
		  "    const _id = req.params.id",
		  "",
		  "    try {",
		  "        const ${2:resource} = await ${1:Resource}.findById(_id)",
		  "",
		  "        if (!${2:resource}) {",
		  "            return res.status(404).send()",
		  "        }",
		  "",
		  "        res.send(${2:resource})",
		  "    } catch (e) {",
		  "        res.status(500).send()",
		  "    }",
		  "})",
		  "",
		  "router.patch('/${2:resource}s/:id', async (req, res) => {",
		  "    const updates = Object.keys(req.body)",
		  "    const allowedUpdates = ['${3:resource_field_1}', '${4:resource_field_2}']",
		  "    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))",
		  "",
		  "    if (!isValidOperation) {",
		  "        return res.status(400).send({ error: 'Invalid updates!' })",
		  "    }",
		  "",
		  "    try {",
		  "        const ${2:resource} = await ${1:Resource}.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })",
		  "",
		  "        if (!${2:resource}) {",
		  "            return res.status(404).send()",
		  "        }",
		  "",
		  "        res.send(${2:resource})",
		  "    } catch (e) {",
		  "        res.status(400).send(e)",
		  "    }",
		  "})",
		  "",
		  "router.delete('/${2:resource}s/:id', async (req, res) => {",
		  "    try {",
		  "        const ${2:resource} = await ${1:Resource}.findByIdAndDelete(req.params.id)",
		  "",
		  "        if (!${2:resource}) {",
		  "            res.status(404).send()",
		  "        }",
		  "",
		  "        res.send(${2:resource})",
		  "    } catch (e) {",
		  "        res.status(500).send()",
		  "    }",
		  "})",
		  "",
		  "module.exports = router"
		],
		"description": "routers/resource.js"
	  },
	  "ejs out": {
		"prefix": "ejsout",
		"body": [
		  "<%= $0 %>"
		],
		"description": "ejs out"
	  },
	  "ejs include": {
		"prefix": "ejsinc",
		"body": [
		  "<%- include(\"./partials/${1:filename}.ejs\") %>$0"
		],
		"description": "ejs include"
	  },
	  "ejs": {
		"prefix": "ejs",
		"body": [
		  "<% ${1:code} %>$0"
		],
		"description": "ejs"
	  },
	  "html form": {
		"prefix": "x-form",
		"body": [
		  "<form action=\\/api/${1:resources}\\ method=\\POST\\>",
		  "  <label for=\\${2:name}\\>${3:label}:</label>",
		  "  <input type=\\text\\ id=\\${2:name}\\ name=\\${2:name}\\ required>",
		  "  <label for=\\${4:name}\\>${5:label}:</label>",
		  "  <input type=\\text\\ id=\\${4:name}\\ name=\\${4:name}\\ required>",
		  "  <label for=\\${6:name}\\>${7:label}:</label>",
		  "  <textarea id=\\${6:name}\\ name=\\${6:name}\\ required></textarea>",
		  "  <button>${8:Submit}</button>",
		  "</form>"
		],
		"description": "html form"
	  },
	  "css normalize": {
		"scope": "css",
		"prefix": "x-css-normalize",
		"body": [
		  "* {",
		  "    padding: 0;",
		  "    margin: 0;",
		  "    box-sizing: border-box;",
		  "}"
		],
		"description": "css normalize"
	  },
	  "mongoose connection": {
		"prefix": "x-db-mongoose.js",
		"body": [
		  "const mongoose = require('mongoose')",
		  "",
		  "mongoose.connect(process.env.MONGODB_URL, {",
		  "    useNewUrlParser: true,",
		  "    useUnifiedTopology: true,",
		  "    useCreateIndex: true,",
		  "    useFindAndModify: false",
		  "})"
		],
		"description": "mongoose connection"
	  },
	  "express app get": {
		"prefix": "x-express-app-get",
		"body": [
		  "app.get('/${1:path}', (req, res) => {",
		  "  res.render('${1:path}', { title: '${2:title}' });",
		  "});"
		],
		"description": "express app get"
	  },
	  "express app get all": {
		"prefix": "x-express-app-get-all",
		"body": [
		  "app.get('/${1:path}', async (req, res) => {",
		  "    try {",
		  "        const ${2:model} = await ${3:Model}.find({})",
		  "        res.render('index', { title: '${4:title}', ${2:model} });",
		  "    } catch (error) {",
		  "        res.render('index', {title: '${4:title}', ${2:model}: []})",
		  "    }",
		  "})"
		],
		"description": "express app get all"
	  },
	  "express app init": {
		"prefix": "x-express-app-0",
		"body": [
		  "const express = require('express')",
		  "",
		  "require('../db/mongoose')",
		  "const ${1:Model} = require('../models/${2:model}') // optional",
		  "const ${3:router}Router = require('../routers/${3:router}')",
		  "",
		  "const port = process.env.PORT",
		  "",
		  "// express app",
		  "const app = express()",
		  "",
		  "// listen for requests",
		  "app.listen(port, () => {",
		  "  console.log(`Server listening to port \\${port}`)",
		  "})",
		  "",
		  "// register view engine",
		  "app.set('view engine', 'ejs')",
		  "",
		  "// middleware & static files",
		  "app.use(express.static('public'))",
		  "app.use(express.urlencoded({ extended: true }))",
		  "",
		  "// web server",
		  "app.get('/', (req, res) => {",
		  "  res.render('index', { title: 'Home' })",
		  "});",
		  "$0",
		  "",
		  "// api's",
		  "app.use(express.json())",
		  "app.use('/api', ${3:router}Router)",
		  "",
		  "// 404 page",
		  "app.use((req, res) => {",
		  "  res.status(404).render('404', { title: '404' })",
		  "})"
		],
		"description": "express app init"
	  },
	  "models resource": {
		"prefix": "x-models-resource.js",
		"body": [
		  "const mongoose = require('mongoose')",
		  "",
		  "const ${1:Resource} = mongoose.model('${1:Resource}', new mongoose.Schema({",
		  "    ${2:field}: {",
		  "        type: String,",
		  "        ${3:required: true,}",
		  "        ${4:default: '${5:txt}',}",
		  "        ${6:enum: [],}",
		  "        ${7:${8|trim,lowercase,minlength,maxlength|}: true,}",
		  "        validate(value) {",
		  "            if (!condition) {",
		  "                throw new Error('Condition not met')",
		  "            }",
		  "        }",
		  "    },",
		  "    ${9:field}: {",
		  "        type: Number,",
		  "        ${10:required: true,}",
		  "        ${11:default: '${12:txt}',}",
		  "        ${13|min,max|}: 0,",
		  "        ${14:enum: [],},",
		  "        ${15:match: RegExp,}",
		  "        validate(value) {",
		  "            if (!condition) {",
		  "                throw new Error('Condition not met')",
		  "            }",
		  "        }",
		  "    }",
		  "}))",
		  "",
		  "module.exports = ${1:Resource}"
		],
		"description": "models resource"
	  },
	  "css 0": {
		"prefix": "x-css-0",
		"body": [
		  "* {",
		  "    padding: 0;",
		  "    margin: 0;",
		  "    box-sizing: border-box;",
		  "}",
		  "",
		  "body {",
		  "    background-color: lightgrey;",
		  "    color: black;",
		  "    width: 80%;",
		  "    margin: auto;",
		  "}",
		  "",
		  "ul {",
		  "    list-style-type: none;",
		  "}",
		  "",
		  "nav li {",
		  "    display: inline-block;",
		  "    margin-left: 16px;",
		  "}",
		  "",
		  "header{",
		  "    margin: 16px;",
		  "    display: flex;",
		  "    justify-content: space-between;",
		  "}",
		  "",
		  "a {",
		  "    text-decoration: none;",
		  "}",
		  "",
		  "label, input, textarea {",
		  "    display: block;",
		  "    margin-bottom: 8px;",
		  "}",
		  "",
		  "main{",
		  "    background-color: lightcyan;",
		  "    border-radius: 16px;",
		  "    margin: 16px;",
		  "    padding: 48px;",
		  "}",
		  "",
		  "footer{",
		  "    margin: 16px;",
		  "}",
		  "",
		  ".post {",
		  "    margin: 16px;",
		  "    padding: 24px;",
		  "    background-color: white;",
		  "    border-radius: 16px;",
		  "}"
		],
		"description": "css 0"
	  }
}
