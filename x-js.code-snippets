{
	// Xavier Visual Studio Code Snippets for Reus Web Hackers course
	"yargs command": {
		"prefix": "yargs1",
		"body": [
			"yargs.command({",
			"    command: '${1:cmd}',",
			"    describe: '${2:txt}',",
			"    builder: {",
			"        ${3:option}: {",
			"            describe: '${4:txt}',",
			"            demandOption: true,",
			"            type: 'string'",
			"        },",
			"        ${5:option}: {",
			"            describe: '${6:example}',",
			"            demandOption: true,",
			"            type: 'string'",
			"        }",
			"    },",
			"    handler(argv) {",
			"        addNote(argv.${3:option}, argv.${5:option})",
			"    }",
			"})"
		],
		"description": "yargs command"
	},
	"yargs parse": {
		"prefix": "yargs2",
		"body": [
			"yargs.parse()"
		],
		"description": "yargs parse"
	},
	"help de npm": {
		"prefix": "x-help-npm",
		"body": [
			"npm init // para generar el package.json",
			"npm install // para instalar los paquetes de package.json",
			"",
			"npm install [-g] <paquete> [ --save-dev | -D ]",
			"npm uninstall [-g] <paquete>",
			"",
			"npm list [-g] [--depth=0]",
			"",
			"npm run <nombre_del_script_en_package.json> ",
			"",
			"npm outdated [-g] ",
			"npm update [-g] <paquete>",
			"",
			"npm audit [fix]"
		],
		"description": "help de npm"
	},
	"mongoose model": {
		"prefix": "x-help-mongoose-model",
		"body": [
			"const mongoose = require('mongoose')",
			"const validator = require('validator')",
			"",
			"const User = mongoose.model('User', {",
			"    name: {",
			"        type: String,",
			"        required: true,",
			"        trim: true",
			"    },",
			"    email: {",
			"        type: String,",
			"        required: true,",
			"        trim: true,",
			"        lowercase: true,",
			"        validate(value) {",
			"            if (!validator.isEmail(value)) {",
			"                throw new Error('Email is invalid')",
			"            }",
			"        }",
			"    },",
			"    password: {",
			"        type: String,",
			"        required: true,",
			"        minlength: 7,",
			"        trim: true,",
			"        validate(value) {",
			"            if (value.toLowerCase().includes('password')) {",
			"                throw new Error('Password cannot contain \"password\"')",
			"            }",
			"        }",
			"    },",
			"    age: {",
			"        type: Number,",
			"        default: 0,",
			"        validate(value) {",
			"            if (value < 0) {",
			"                throw new Error('Age must be a postive number')",
			"            }",
			"        }",
			"    }",
			"})",
			"",
			"module.exports = User"
		],
		"description": "mongoose model"
	},
	"mongoose db": {
		"prefix": "x-db-mongoose.js",
		"body": [
			"const mongoose = require('mongoose')",
			"",
			"mongoose.connect('mongodb://127.0.0.1:27017/task-manager-api', {",
			"    useNewUrlParser: true,",
			"    useCreateIndex: true,",
			"    useFindAndModify: false",
			"})"
		],
		"description": "mongoose db"
	},
	"heroku help": {
		"prefix": "x-help-heroku",
		"body": [
		  "heroku -v",
		  "",
		  "heroku login // to start the following",
		  "",
		  "heroku keys:add // to upload id_rsa.pub",
		  "",
		  "heroku create your-awesome-app // to create a heroku app: http and git URLâ€™s created and directly adding git URL into our remotes",
		  "",
		  "heroku git:remote -a your-awesome-app",
		  "",
		  "At package.json:",
		  "	 \"scripts\": {\"start\": \"node src/app.js\"} // since heroku executes: \"npm run start\"",
		  "",
		  "At app.js: ",
		  "	const port = process.env.PORT || 3000   // first set by heroku dynamically, second for our local set up",
		  "",
		  "Delete up to localhost:3000 on URL fetches // using relative paths",
		  "",
		  "Do git add & commit",
		  "",
		  "git push heroku master"
		],
		"description": "heroku help"
	  },
	  "routers/resouce.js": {
		"prefix": "x-routers-resource.js",
		"body": [
		  "const express = require('express')",
		  "const router = new express.Router()",
		  "const ${1:Resource} = require('../models/${2:resource}')",
		  "",
		  "router.post('/${2:resource}s', async (req, res) => {",
		  "    const ${2:resource} = new ${1:Resource}(req.body)",
		  "",
		  "    try {",
		  "        await ${2:resource}.save()",
		  "        res.status(201).send(${2:resource})",
		  "    } catch (e) {",
		  "        res.status(400).send(e)",
		  "    }",
		  "})",
		  "",
		  "router.get('/${2:resource}s', async (req, res) => {",
		  "    try {",
		  "        const ${2:resource}s = await ${1:Resource}.find({})",
		  "        res.send(${2:resource}s)",
		  "    } catch (e) {",
		  "        res.status(500).send()",
		  "    }",
		  "})",
		  "",
		  "router.get('/${2:resource}s/:id', async (req, res) => {",
		  "    const _id = req.params.id",
		  "",
		  "    try {",
		  "        const ${2:resource} = await ${1:Resource}.findById(_id)",
		  "",
		  "        if (!${2:resource}) {",
		  "            return res.status(404).send()",
		  "        }",
		  "",
		  "        res.send(${2:resource})",
		  "    } catch (e) {",
		  "        res.status(500).send()",
		  "    }",
		  "})",
		  "",
		  "router.patch('/${2:resource}s/:id', async (req, res) => {",
		  "    const updates = Object.keys(req.body)",
		  "    const allowedUpdates = ['${3:resource_field_1}', '${4:resource_field_2}']",
		  "    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))",
		  "",
		  "    if (!isValidOperation) {",
		  "        return res.status(400).send({ error: 'Invalid updates!' })",
		  "    }",
		  "",
		  "    try {",
		  "        const ${2:resource} = await ${1:Resource}.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })",
		  "",
		  "        if (!${2:resource}) {",
		  "            return res.status(404).send()",
		  "        }",
		  "",
		  "        res.send(${2:resource})",
		  "    } catch (e) {",
		  "        res.status(400).send(e)",
		  "    }",
		  "})",
		  "",
		  "router.delete('/${2:resource}s/:id', async (req, res) => {",
		  "    try {",
		  "        const ${2:resource} = await ${1:Resource}.findByIdAndDelete(req.params.id)",
		  "",
		  "        if (!${2:resource}) {",
		  "            res.status(404).send()",
		  "        }",
		  "",
		  "        res.send(${2:resource})",
		  "    } catch (e) {",
		  "        res.status(500).send()",
		  "    }",
		  "})",
		  "",
		  "module.exports = router"
		],
		"description": "routers/resouce.js"
	  }
}